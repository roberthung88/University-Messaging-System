service cloud.firestore {
  match /databases/{database}/documents {
  	// Chatrooms:
  	//  - Authenticated users can read if chatroom is NOT
  	//    private or they exist in admin or member arrays
    //  - ^ can add and edit messages.
    //  - Authenticated admin users can change metadata of chatroom.
    //  - Validation: Check name is same as auth token and text length below 300 char or that imageUrl is a URL.
    //  - Deletes are not allowed.
    match /chatrooms/{chatroomId} {
    
    	function isChatroomPrivate(rsc) {
       	return rsc.data.private;
      }
      
    	function userAllowedInChatroom(rsc) {
      	return !isChatroomPrivate(rsc) || (userHasElevatedPermission(get(/databases/$(database)/documents/chatrooms/$(chatroomId))) //|| exists(/databases/$(database)/documents/chatrooms/$(chatroomId)/members/$(request.auth.uid)));
        					|| request.auth.uid in rsc.data.membersArr);
      }
      
      function userHasElevatedPermission(rsc) {
      	return get(/databases/$(database)/documents/chatrooms/$(chatroomId)/members/$(request.auth.uid)).data.admin == true
        	|| request.auth.uid in rsc.data.adminsArr;
      }
      
      function isUpdateToTimestampField(attr) {
      	return attr.diff(resource.data).affectedKeys().hasOnly(['timestamp']);
      }
    
    	allow read: if request.auth != null && userAllowedInChatroom(get(/databases/$(database)/documents/chatrooms/$(chatroomId)));
      allow list: if request.auth.uid in resource.data.membersArr;
      allow create: if request.auth != null;
      allow update: if request.auth != null
      							&& (userHasElevatedPermission(get(/databases/$(database)/documents/chatrooms/$(chatroomId)))
                    	|| isUpdateToTimestampField(request.resource.data));
    	allow delete: if false;
      
      match /messages/{messageId} {
      	allow read: if request.auth != null && userAllowedInChatroom(get(/databases/$(database)/documents/chatrooms/$(chatroomId)));
        allow create, update: if request.auth != null
        							&& request.resource.data.name == request.auth.token.name
                      && userAllowedInChatroom(get(/databases/$(database)/documents/chatrooms/$(chatroomId)))
                      && (request.resource.data.text is string
                      	&& request.resource.data.text.size() <= 300
                        || request.resource.data.imageUrl is string
                        && request.resource.data.imageUrl.matches('https?://.*'));
        allow delete: if false;
      }
      
      match /members/{memberId} {
      	allow read: if request.auth != null && userAllowedInChatroom(get(/databases/$(database)/documents/chatrooms/$(chatroomId)));
      	allow create: if request.auth != null;
      	allow update, delete: if request.auth != null && userHasElevatedPermission(get(/databases/$(database)/documents/chatrooms/$(chatroomId)));
      }
    }
  	
    // Messages:
    //   - Anyone can read.
    //   - Authenticated users can add and edit messages.
    //   - Validation: Check name is same as auth token and text length below 300 char or that imageUrl is a URL.
    //   - Deletes are not allowed.
    match /messages/{messageId} {
      allow read;
      allow create, update: if request.auth != null
                    && request.resource.data.name == request.auth.token.name
                    && (request.resource.data.text is string
                      && request.resource.data.text.size() <= 300
                      || request.resource.data.imageUrl is string
                      && request.resource.data.imageUrl.matches('https?://.*'));
      allow delete: if false;
    }
    // FCM Tokens:
    //   - Anyone can write their token.
    //   - Reading list of tokens is not allowed.
    match /fcmTokens/{token} {
      allow read: if false;
      allow write;
    }
    // User Profile:
    //  - All authenticated users can read.
    //  - Authenticated users can add and edit their own information.
    //  - Deletes are not allowed.
    match /users/{userId} {
    
    	function userHasElevatedPermission(chatroomId) {
        return userId in get(/databases/$(database)/documents/chatrooms/$(chatroomId)).data.adminsArr
          			|| get(/databases/$(database)/documents/chatrooms/$(chatroomId)/members/$(request.auth.uid)).data.admin == true;
      }
    
    	allow read: if request.auth != null;
      allow create, update: if request.auth != null
      							&& userId == request.auth.uid;
      allow delete: if false;
      
      match /chatrooms/{chatroomId} {
      	allow read: if request.auth != null
      							&& userId == request.auth.uid;
        allow create, update, delete: if request.auth != null
      							&& (userId == request.auth.uid
                    	|| userHasElevatedPermission(chatroomId));
      }
      
      match /majors/{majorId} {
      	allow read;
        allow create, update, delete: if request.auth != null
        						&& userId == request.auth.uid;
      }
      
      match /interests/{interestId} {
      	allow read;
        allow create, update, delete: if request.auth != null
        						&& userId == request.auth.uid;
      }
    }
  }
}
